# This is a basic workflow to help you get started with Actions

name: CI

on:
  # Trigger analysis when pushing in main or pull requests, and when creating
  # a pull request. 
  push:
    branches:
      - master
      - develop
  pull_request:
      types: [opened, synchronize, reopened]
jobs:
  build_project:
     runs-on: ubuntu-latest
     strategy:
       matrix:
         node: ['14']
     steps:
      - uses: actions/checkout@v2
      - name: Use Node.JS ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
      - name: Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
#        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Run Tests
        run: yarn test
      - name: Build Source
        run: yarn build
      - name: Sonarcloud
        uses: sonarsource/sonarcloud-github-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
          ETHERSCAN_TOKEN: ${{ secrets.ETHERSCAN_TOKEN }}
